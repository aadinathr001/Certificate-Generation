// Helper function: Convert string to Title Case
function toTitleCase(str) {
  if (typeof str !== 'string' || str.length === 0) return str;
  return str.toLowerCase().replace(/\b\w/g, char => char.toUpperCase());
}

// Main trigger function - runs on form submit
function onFormSubmit(e) {
  try {
    if (!e.namedValues) throw new Error('Invalid event structure.');
    
    const record = getFormData(e);
    const formattedRecord = formatRecord(record);
    
    // Validate record before processing
    if (!formattedRecord || typeof formattedRecord !== 'object' || Object.keys(formattedRecord).length === 0) {
      throw new Error('Invalid record data: ' + JSON.stringify(formattedRecord));
    }
    
    const pdfBlob = generateCertificate(formattedRecord);
    sendEmailWithAttachment(formattedRecord, pdfBlob);
  } catch (error) {
    console.error('Error processing form submission: ', error);
  }
}

// Extract form data
function getFormData(e) {
  if (!e || !e.namedValues) throw new Error('Invalid form submission data');

  const record = {};
  for (const key in e.namedValues) {
    // Handle empty values safely
    const value = e.namedValues[key][0] || '';
    record[key.trim()] = value.trim();
  }
  return record;
}

// Format specific fields
function formatRecord(record) {
  if (!record || typeof record !== 'object') {
    return {};
  }
  
  const formatted = {...record};
  
  if (formatted['Name']) {
    formatted['Name'] = toTitleCase(formatted['Name']);
  }
  if (formatted['Department Name']) {
    formatted['Department Name'] = toTitleCase(formatted['Department Name']);
  }
  if (formatted['Institution Name']) {
    formatted['Institution Name'] = toTitleCase(formatted['Institution Name']);
  }
  
  return formatted;
}

// Generate certificate with font control
function generateCertificate(record) {
  // Validate record first
  if (!record || typeof record !== 'object' || Object.keys(record).length === 0) {
    throw new Error('Invalid record passed to generateCertificate: ' + JSON.stringify(record));
  }
  
  const TEMPLATE_ID = 'ENTER_TEMPLATE_ID';
  
  // Create temporary copy of template
  const templateFile = DriveApp.getFileById(TEMPLATE_ID);
  const tempFile = templateFile.makeCopy();
  const tempId = tempFile.getId();
  
  const presentation = SlidesApp.openById(tempId);
  const slide = presentation.getSlides()[0];

  // Define font styles for each placeholder
  const fontStyles = {
    'Name': { 
      fontFamily: 'Baskervville SC',
      fontSize: 20,
      bold: true,
      fontColor: '#3A3B3C'
    },
    'Department Name': {
      fontFamily: 'Baskervville SC',
      fontSize: 20,
      bold: true,
      fontColor: '#3A3B3C'
    },
    'Institution Name': {
      fontFamily: 'Baskervville SC',
      fontSize: 20,
      bold: true,
      fontColor: '#3A3B3C'
    },
    // Add more fields as needed
    'Default': {
      fontFamily: 'Baskervville SC',
      fontSize: 20,
      fontColor: '#000000'
    }
  };

  // Replace placeholders and apply styles
  const shapes = slide.getShapes();
  for (let i = 0; i < shapes.length; i++) {
    const shape = shapes[i];
    const text = shape.getText().asString();
    
    Object.keys(record).forEach(key => {
      const placeholder = `{{${key}}}`;
      if (text.includes(placeholder)) {
        // Replace text
        shape.getText().replaceAllText(placeholder, record[key]);
        
        // Apply font style if defined
        const style = fontStyles[key] || fontStyles['Default'];
        applyTextStyle(shape, record[key], style);
      }
    });
  }

  presentation.saveAndClose();

  // Create PDF and cleanup
  const pdfBlob = tempFile.getAs('application/pdf');
  tempFile.setTrashed(true);
  
  return pdfBlob;
}

// Apply style to specific text within a shape
function applyTextStyle(shape, searchText, style) {
  if (!searchText || !style) return;
  
  try {
    const text = shape.getText();
    const ranges = text.find(searchText);
    
    if (ranges && ranges.length > 0) {
      for (let i = 0; i < ranges.length; i++) {
        const textStyle = ranges[i].getTextStyle();
        
        if (style.fontFamily) {
          textStyle.setFontFamily(style.fontFamily);
        }
        if (style.fontSize) {
          textStyle.setFontSize(style.fontSize);
        }
        if (style.bold !== undefined) {
          textStyle.setBold(style.bold);
        }
        if (style.italic !== undefined) {
          textStyle.setItalic(style.italic);
        }
        if (style.fontColor) {
          textStyle.setForegroundColor(style.fontColor);
        }
      }
    }
  } catch (e) {
    console.warn('Error applying text style:', e);
  }
}

// Send certificate via email
function sendEmailWithAttachment(record, pdfBlob) {
  if (!record || !pdfBlob) return;
  
  const email = record['Email Address'];
  if (!email) {
    throw new Error('No email address found in record');
  }

  const subject = 'Your Certificate of Achievement';
  const body = `Dear ${record['Name'] || 'participant'},\n\nCongratulations! Please find your certificate attached.\n\nBest regards,\nThe Certification Team`;
  
  try {
    MailApp.sendEmail({
      to: email,
      subject: subject,
      body: body,
      attachments: [{
        fileName: `Certificate_${record['Name'] || 'Certificate'}.pdf`,
        content: pdfBlob.getBytes(),
        mimeType: 'application/pdf'
      }]
    });
    console.log(`Email sent to ${email}`);
  } catch (e) {
    console.error('Failed to send email:', e);
  }
}

// Create spreadsheet-based trigger
function createSpreadsheetTrigger() {
  const ss = SpreadsheetApp.getActive();
  ScriptApp.newTrigger('onFormSubmit')
    .forSpreadsheet(ss)
    .onFormSubmit()
    .create();
}

// Run this first to set up trigger
function initialize() {
  createSpreadsheetTrigger();
}
